// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: compute.proto

package compute

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Compute_Square_FullMethodName = "/compute.Compute/Square"
	Compute_Cube_FullMethodName   = "/compute.Compute/Cube"
)

// ComputeClient is the client API for Compute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComputeClient interface {
	Square(ctx context.Context, in *RequestBody, opts ...grpc.CallOption) (*ResponseBody, error)
	Cube(ctx context.Context, in *RequestBody, opts ...grpc.CallOption) (*ResponseBody, error)
}

type computeClient struct {
	cc grpc.ClientConnInterface
}

func NewComputeClient(cc grpc.ClientConnInterface) ComputeClient {
	return &computeClient{cc}
}

func (c *computeClient) Square(ctx context.Context, in *RequestBody, opts ...grpc.CallOption) (*ResponseBody, error) {
	out := new(ResponseBody)
	err := c.cc.Invoke(ctx, Compute_Square_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeClient) Cube(ctx context.Context, in *RequestBody, opts ...grpc.CallOption) (*ResponseBody, error) {
	out := new(ResponseBody)
	err := c.cc.Invoke(ctx, Compute_Cube_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComputeServer is the server API for Compute service.
// All implementations must embed UnimplementedComputeServer
// for forward compatibility
type ComputeServer interface {
	Square(context.Context, *RequestBody) (*ResponseBody, error)
	Cube(context.Context, *RequestBody) (*ResponseBody, error)
	mustEmbedUnimplementedComputeServer()
}

// UnimplementedComputeServer must be embedded to have forward compatible implementations.
type UnimplementedComputeServer struct {
}

func (UnimplementedComputeServer) Square(context.Context, *RequestBody) (*ResponseBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Square not implemented")
}
func (UnimplementedComputeServer) Cube(context.Context, *RequestBody) (*ResponseBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cube not implemented")
}
func (UnimplementedComputeServer) mustEmbedUnimplementedComputeServer() {}

// UnsafeComputeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComputeServer will
// result in compilation errors.
type UnsafeComputeServer interface {
	mustEmbedUnimplementedComputeServer()
}

func RegisterComputeServer(s grpc.ServiceRegistrar, srv ComputeServer) {
	s.RegisterService(&Compute_ServiceDesc, srv)
}

func _Compute_Square_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServer).Square(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compute_Square_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServer).Square(ctx, req.(*RequestBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compute_Cube_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServer).Cube(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compute_Cube_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServer).Cube(ctx, req.(*RequestBody))
	}
	return interceptor(ctx, in, info, handler)
}

// Compute_ServiceDesc is the grpc.ServiceDesc for Compute service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Compute_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "compute.Compute",
	HandlerType: (*ComputeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Square",
			Handler:    _Compute_Square_Handler,
		},
		{
			MethodName: "Cube",
			Handler:    _Compute_Cube_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "compute.proto",
}
